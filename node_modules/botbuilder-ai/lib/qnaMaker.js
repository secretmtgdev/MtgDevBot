"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const entities = require("html-entities");
const os = require("os");
const pjson = require('../package.json');
const request = require("request-promise-native");
const QNAMAKER_TRACE_TYPE = 'https://www.qnamaker.ai/schemas/trace';
const QNAMAKER_TRACE_NAME = 'QnAMaker';
const QNAMAKER_TRACE_LABEL = 'QnAMaker Trace';
/**
 * @private
 */
const htmlentities = new entities.AllHtmlEntities();
/**
 * Query a QnA Maker knowledge base for answers.
 *
 * @remarks
 * This class is used to make queries to a single QnA Maker knowledge base and return the result.
 *
 * Use this to process incoming messages with the [getAnswers()](#getAnswers) method.
 */
class QnAMaker {
    /**
     * Creates a new QnAMaker instance.
     * @param endpoint The endpoint of the knowledge base to query.
     * @param options (Optional) additional settings used to configure the instance.
     */
    constructor(endpoint, options = {}) {
        this.endpoint = endpoint;
        if (!endpoint) {
            throw new TypeError('QnAMaker requires valid QnAMakerEndpoint.');
        }
        const { scoreThreshold = 0.3, top = 1, strictFilters = [], metadataBoost = [] } = options;
        this._options = {
            scoreThreshold,
            top,
            strictFilters,
            metadataBoost
        };
        this.validateOptions(this._options);
    }
    /**
     * Calls the QnA Maker service to generate answer(s) for a question.
     *
     * @remarks
     * Returns an array of answers sorted by score with the top scoring answer returned first.
     *
     * In addition to returning the results from QnA Maker, [getAnswers()](#getAnswers) will also
     * emit a trace activity that contains the QnA Maker results.
     *
     * @param context The Turn Context that contains the user question to be queried against your knowledge base.
     * @param options (Optional) The options for the QnA Maker knowledge base. If null, constructor option is used for this instance.
     */
    async getAnswers(context, options) {
        if (!context) {
            throw new TypeError('QnAMaker.getAnswers() requires a TurnContext.');
        }
        const queryResult = [];
        const question = this.getTrimmedMessageText(context);
        const queryOptions = { ...this._options, ...options };
        this.validateOptions(queryOptions);
        if (question.length > 0) {
            const answers = await this.queryQnaService(this.endpoint, question, queryOptions);
            const sortedQnaAnswers = this.sortAnswersWithinThreshold(answers, queryOptions);
            queryResult.push(...sortedQnaAnswers);
        }
        await this.emitTraceInfo(context, queryResult, queryOptions);
        return queryResult;
    }
    /**
     * Calls [generateAnswer()](#generateanswer) and sends the resulting answer as a reply to the user.
     * @deprecated Instead, favor using [QnAMaker.getAnswers()](#getAnswers) to generate answers for a question.
     *
     * @remarks
     * Returns a value of `true` if an answer was found and sent. If multiple answers are
     * returned the first one will be delivered.
     * @param context Context for the current turn of conversation with the user.
     */
    async answer(context) {
        if (!context) {
            throw new TypeError('QnAMaker.answer() requires a TurnContext.');
        }
        const { top, scoreThreshold } = this._options;
        const question = this.getTrimmedMessageText(context);
        const answers = await this.generateAnswer(question, top, scoreThreshold);
        await this.emitTraceInfo(context, answers, this._options);
        if (answers.length > 0) {
            await context.sendActivity({ text: answers[0].answer, type: 'message' });
            return true;
        }
        return false;
    }
    /**
     * Calls the QnA Maker service to generate answer(s) for a question.
     *
     * @deprecated Instead, favor using [QnAMaker.getAnswers()](#getAnswers) to generate answers for a question.
     *
     * @remarks
     * Returns an array of answers sorted by score with the top scoring answer returned first.
     *
     * @param question The question to answer.
     * @param top (Optional) number of answers to return. Defaults to a value of `1`.
     * @param scoreThreshold (Optional) minimum answer score needed to be considered a match to questions. Defaults to a value of `0.001`.
     */
    async generateAnswer(question, top, scoreThreshold) {
        const trimmedAnswer = question ? question.trim() : '';
        if (trimmedAnswer.length > 0) {
            const answers = await this.callService(this.endpoint, question, typeof top === 'number' ? top : 1);
            const minScore = typeof scoreThreshold === 'number' ? scoreThreshold : 0.001;
            return answers.filter((ans) => ans.score >= minScore)
                .sort((a, b) => b.score - a.score);
        }
        return [];
    }
    /**
     * Called internally to query the QnA Maker service.
     *
     * @remarks
     * This is exposed to enable better unit testing of the service.
     */
    async callService(endpoint, question, top) {
        return this.queryQnaService(endpoint, question, { top });
    }
    /**
     * Gets the message from the Activity in the TurnContext, trimmed of whitespaces.
     */
    getTrimmedMessageText(context) {
        const question = (context && context.activity && context.activity.text) ? context.activity.text : '';
        return question.trim();
    }
    /**
     * Called internally to query the QnA Maker service.
     */
    async queryQnaService(endpoint, question, options) {
        const url = `${endpoint.host}/knowledgebases/${endpoint.knowledgeBaseId}/generateanswer`;
        const headers = this.getHeaders(endpoint);
        const queryOptions = { ...this._options, ...options };
        this.validateOptions(queryOptions);
        const qnaResult = await request({
            url: url,
            method: 'POST',
            headers: headers,
            json: {
                question: question,
                ...queryOptions
            }
        });
        return this.formatQnaResult(qnaResult);
    }
    /**
     * Sorts all QnAMakerResult from highest-to-lowest scoring.
     * Filters QnAMakerResults within threshold specified (default threshold: .001).
     */
    sortAnswersWithinThreshold(answers = [], queryOptions) {
        const minScore = typeof queryOptions.scoreThreshold === 'number' ? queryOptions.scoreThreshold : 0.001;
        return answers.filter((ans) => ans.score >= minScore)
            .sort((a, b) => b.score - a.score);
    }
    /**
     * Emits a trace event detailing a QnA Maker call and its results.
     *
     * @param context Context for the current turn of conversation with the user.
     * @param answers Answers returned by QnA Maker.
     */
    async emitTraceInfo(context, answers, queryOptions) {
        const requestOptions = { ...this._options, ...queryOptions };
        const { scoreThreshold, top, strictFilters, metadataBoost } = requestOptions;
        const traceInfo = {
            message: context.activity,
            queryResults: answers,
            knowledgeBaseId: this.endpoint.knowledgeBaseId,
            scoreThreshold,
            top,
            strictFilters,
            metadataBoost
        };
        return context.sendActivity({
            type: 'trace',
            valueType: QNAMAKER_TRACE_TYPE,
            name: QNAMAKER_TRACE_NAME,
            label: QNAMAKER_TRACE_LABEL,
            value: traceInfo
        });
    }
    /**
     * Sets headers for request to QnAMaker service.
     *
     * The [QnAMakerEndpointKey](#QnAMakerEndpoint.QnAMakerEndpointKey) is set as the value of
     * `Authorization` header for v4.0 and later of QnAMaker service.
     *
     * Legacy QnAMaker services use the `Ocp-Apim-Subscription-Key` header for the QnAMakerEndpoint value instead.
     *
     * [QnAMaker.getHeaders()](#QnAMaker.getHeaders) also gets the User-Agent header value.
     */
    getHeaders(endpoint) {
        const headers = {};
        const isLegacyProtocol = endpoint.host.endsWith('v2.0') || endpoint.host.endsWith('v3.0');
        if (isLegacyProtocol) {
            headers['Ocp-Apim-Subscription-Key'] = endpoint.endpointKey;
        }
        else {
            headers.Authorization = `EndpointKey ${endpoint.endpointKey}`;
        }
        headers['User-Agent'] = this.getUserAgent();
        return headers;
    }
    getUserAgent() {
        const packageUserAgent = `${pjson.name}/${pjson.version}`;
        const platformUserAgent = `(${os.arch()}-${os.type()}-${os.release()}; Node.js,Version=${process.version})`;
        return `${packageUserAgent} ${platformUserAgent}`;
    }
    validateOptions(options) {
        const { scoreThreshold, top } = options;
        if (scoreThreshold) {
            this.validateScoreThreshold(scoreThreshold);
        }
        if (top) {
            this.validateTop(top);
        }
    }
    validateScoreThreshold(scoreThreshold) {
        if (typeof scoreThreshold !== 'number' || !(scoreThreshold > 0 && scoreThreshold < 1)) {
            throw new TypeError(`"${scoreThreshold}" is an invalid scoreThreshold. QnAMakerOptions.scoreThreshold must have a value between 0 and 1.`);
        }
    }
    validateTop(qnaOptionTop) {
        if (!Number.isInteger(qnaOptionTop) || qnaOptionTop < 1) {
            throw new RangeError(`"${qnaOptionTop}" is an invalid top value. QnAMakerOptions.top must be an integer greater than 0.`);
        }
    }
    formatQnaResult(qnaResult) {
        return qnaResult.answers.map((ans) => {
            ans.score = ans.score / 100;
            ans.answer = htmlentities.decode(ans.answer);
            if (ans.qnaId) {
                ans.id = ans.qnaId;
                delete ans.qnaId;
            }
            return ans;
        });
    }
}
exports.QnAMaker = QnAMaker;
//# sourceMappingURL=qnaMaker.js.map